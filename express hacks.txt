Comments:
control+k+c
================================================================================================================================================================
install nodemon:
npm install --save-dev nodemon
=========================================================================================================================================================
nodemon to package json:
npm init==>
then to change in package json:
"devDependencies": {},
"scripts": {
"test": "echo \"Error: no test specified\" && exit 1",
"start":"nodemon app.js"
},

=========================================================================================================================================================

app skelet:

var express = require('express');
var app = express();

app.use('/URL', function (req, res,next) {
res.send("<h1>no such page</h1>");
}); 

app.listen(port number);

=========================================================================================================================================================

router skelet+sendfile with path:

var express = require('express');
const Router=express.Router();
var path=require("path");

Router.get('/home', function (req, res) {
res.sendFile(path.join(__dirname,"../home.html"));
});

module.exports=Router;
=========================================================================================================================================================

use the router in app:
var express = require('express');
var app = express();
var home=require('./routs/home');

app.use(home);


app.use('/', function (req, res,next) {
res.send("<h1>no such page</h1>");
}); 

app.listen(3000);

=========================================================================================================================================================


form skelet:
'<form action="/add-product" method="POST"><input type="text" name="title"><button type="submit">Add Product</button></form>'

=========================================================================================================================================================
to read a value of imput:
add bodyparser;
const bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({extended: true}));

=========================================================================================================================================================
set view engine:
app.set('view engine','name of the engine');
app.set('views','where to find file with the template');

=========================================================================================================================================================
render to view engine template:
  res.render('file template name');

or:
    res.render('404',{title:'value of this property'});

=========================================================================================================================================================
ejs:
  <% users.forEach(function(user){ %>
    <%- html template %>
  <% }); %


<%=value from rendering%>

=========================================================================================================================================================
controller example:
exports.addProduxt2View = (req, res, next) => {
    res.render('add-product', { title: 'value of this property' });
};

connect to rout:
router.get('/add-product', productVewer.addProduxt2View);

=========================================================================================================================================================
module expmple:

allproducts = [];
module.exports = class Product {
    constructor(name) {
        this.title = name;
    }

    addToAll() {
        allproducts.push(this);
    }
    static showProducts() {
        return allproducts;
    }
}
=========================================================================================================================================================
add module to controller:

const Item = require("../modules/prodcts");

exports.addToList = (req, res, next) => {
    const all = Item.showProducts();
    res.render('list', { lists: all });
    console.log("from list", all);
};

=========================================================================================================================================================
add module to controller:

const Item = require("../modules/prodcts");

exports.newProd = (req, res, next) => {
    const newPro = new Item(req.body.product);
    console.log(req.body.product);
    newPro.addToAll();
    console.log(newPro);
    res.redirect("/list");
};
=========================================================================================================================================================
rewrite file skellet:

 var datapath = path.join("data", "data.json");

        fs.readFile(datapath, (err, data) => {
            let allproducts = [];
            if (!err) {
                allproducts = JSON.parse(data);
            }
            allproducts.push(this);
            fs.writeFile(datapath, JSON.stringify(allproducts), (err) => {
                console.log(err);
            });
        });

==========================================================================================================================================================
        make method heppand after its function example:

        sending the data by argument:
        ================================
      static showProducts(datapasser) {
        const datapath = path.join("data", "data.json");
        fs.readFile(datapath, (err, datafile) => {
            if (err) {
               datapasser([]);
            }
            datapasser(JSON.parse(datafile));
        });

    }

    getting the data by argument:
    ================================
      Item.showProducts(datapasser => {
        res.render('list', { lists: datapasser });
        console.log("from list", datapasser);
    });

==========================================================================================================================================================
read data and render it synchronically:

read and send to controller:
==============================
   static showProducts() {
        const datapath = path.join("data", "data.json");
        let file = fs.readFileSync(datapath, "utf8", (err, datafile) => {
            if (err) {
                return [];
            }
            return JSON.parse(datafile);
        });
        console.log("file       " + JSON.parse(file));
        return JSON.parse(file);

    }

   get data from mudule and render to view:
===========================================
exports.addToList = (req, res, next) => {
    const ItemsFromFile = Item.showProducts();
    console.log("rrr " + ItemsFromFile);
    res.render('list', { we: ItemsFromFile });

};

